{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Provision a VPC (across two AZs), a Bastion and NAT instance, and a generic Security Group with ingress access to the NAT instance and from the Bastion instance. Output the VPC, Subnet, and SG IDs.",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk and Bastion hosts",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },

    "SSHFrom": {
      "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "BastionInstanceType": {
      "Description": "Bastion Host EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "NATInstanceType": {
      "Description": "NET Device EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPCAvailabilityZone1": {
      "Description": "One of two Availability Zones that will be used to create subnets.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },
    "VPCAvailabilityZone2": {
      "Description": "Two of two Availability Zones that will be used to create subnets. Must be different than VPCAvailabilityZone2.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    }
  },

  "Mappings": {
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-c6699baf"
      },
      "us-west-2": {
        "AMI": "ami-52ff7262"
      },
      "us-west-1": {
        "AMI": "ami-3bcc9e7e"
      },
      "eu-west-1": {
        "AMI": "ami-0b5b6c7f"
      },
      "ap-southeast-1": {
        "AMI": "ami-02eb9350"
      },
      "ap-southeast-2": {
        "AMI": "ami-ab990e91"
      },
      "ap-northeast-1": {
        "AMI": "ami-14d86d15"
      },
      "sa-east-1": {
        "AMI": "ami-0439e619"
      }
    },

    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m3.2xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      },
      "cc1.4xlarge": {
        "Arch": "64Cluster"
      },
      "cc2.8xlarge": {
        "Arch": "64Cluster"
      },
      "cg1.4xlarge": {
        "Arch": "64GPU"
      }
    },

    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-a0cd60c9",
        "64": "ami-aecd60c7",
        "64Cluster": "ami-a8cd60c1",
        "64GPU": "ami-eccf6285"
      },
      "us-west-2": {
        "32": "ami-46da5576",
        "64": "ami-48da5578",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "us-west-1": {
        "32": "ami-7d4c6938",
        "64": "ami-734c6936",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "eu-west-1": {
        "32": "ami-61555115",
        "64": "ami-6d555119",
        "64Cluster": "ami-67555113",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-1": {
        "32": "ami-220b4a70",
        "64": "ami-3c0b4a6e",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2": {
        "32": "ami-b3990e89",
        "64": "ami-bd990e87",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1": {
        "32": "ami-2a19aa2b",
        "64": "ami-2819aa29",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      },
      "sa-east-1": {
        "32": "ami-f836e8e5",
        "64": "ami-fe36e8e3",
        "64Cluster": "NOT_YET_SUPPORTED",
        "64GPU": "NOT_YET_SUPPORTED"
      }
    },

    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public1": {
        "CIDR": "10.0.100.0/24"
      },
      "Public2": {
        "CIDR": "10.0.101.0/24"
      },
      "Private1": {
        "CIDR": "10.0.200.0/24"
      },
      "Private2": {
        "CIDR": "10.0.201.0/24"
      }
    }
  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Public1", "CIDR"]
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone1"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Public2", "CIDR"]
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Public"
        }]
      }
    },

    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },

    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHFrom"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },

    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PublicSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PublicSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },

    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone1"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Private1", "CIDR"]
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Ref": "VPCAvailabilityZone2"
        },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Private2", "CIDR"]
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "PrivateSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },

    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [{
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }, {
          "Key": "Network",
          "Value": "Private"
        }]
      }
    },

    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },

    "PrivateSubnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "PrivateSubnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },

    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },

    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": ["AWSNATAMI", {
            "Ref": "AWS::Region"
          }, "AMI"]
        },
        "SecurityGroupIds": [{
          "Ref": "NATSecurityGroup"
        }]
      }
    },

    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "SourceSecurityGroupId": {
            "Ref": "InstanceSecurityGroup"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG that EB instances will launch into.",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },

    "BastionIPAddress": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },

    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "BastionInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "ImageId": {
          "Fn::FindInMap": ["AWSRegionArch2AMI", {
            "Ref": "AWS::Region"
          }, {
            "Fn::FindInMap": ["AWSInstanceType2Arch", {
              "Ref": "BastionInstanceType"
            }, "Arch"]
          }]
        },
        "SecurityGroupIds": [{
          "Ref": "BastionSecurityGroup"
        }]
      }
    },

    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to the Bastion host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Ref": "SSHFrom"
          }
        }],
        "SecurityGroupEgress": [{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["SubnetConfig", "Private1", "CIDR"]
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::FindInMap": ["SubnetConfig", "Private2", "CIDR"]
          }
        }]
      }
    }
  },
  "Outputs": {

    "Bastion": {
      "Description": "IP Address of the Bastion host",
      "Value": {
        "Ref": "BastionIPAddress"
      }
    },
    "InstanceSecurityGroup" : {
      "Description" : "The ID of a VPC Security Group that has ingress access to the NAT instance.",
      "Value" : { "Ref" : "InstanceSecurityGroup" }
    },
    "VPCId" : {
      "Description" : "A VPC ID.",
      "Value" : { "Ref" : "VPC" }
    },
    "PrivateSubnet1" : {
      "Description" : "A private VPC subnet ID.",
      "Value" : { "Ref" : "PrivateSubnet1" }
    },
    "PrivateSubnet2" : {
      "Description" : "A private VPC subnet ID. Must be in a different AZ than PrivateSubnet1",
      "Value" : {"Ref" : "PrivateSubnet2" }
    },
    "PublicSubnet1" : {
      "Description" : "A public VPC subnet ID.",
      "Value" : { "Ref" : "PublicSubnet1" }
    },
    "PublicSubnet2" : {
      "Description" : "A public VPC subnet ID. Must be in a different AZ than PrivateSubnet1",
      "Value" : { "Ref" : "PublicSubnet2" }
    }
  }
}
